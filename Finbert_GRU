import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import GRU, Dense
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv('DutchBanglaBankFinbert.csv')

# Preprocess data
df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)  # Ensure Date column is in datetime format

# Preprocess the Volume column
df['Vol.'] = df['Vol.'].replace('[KMB]+$', '', regex=True).astype(float) * df['Vol.'].str.extract(r'[\d\.]+([KMB]+)', expand=False).fillna(1).replace(['K','M', 'B'], [10**3, 10**6, 10**9]).astype(int)

# Select relevant features for modeling
df_filtered = df[['Open', 'Price', 'High', 'Low', 'Vol.']]

# Normalize data (excluding 'Date' column)
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df_filtered)

# Define a function to create sequences for GRU
def create_sequences(data, n_steps):
    X, y = [], []
    for i in range(len(data) - n_steps):
        X.append(data[i:(i + n_steps)])
        y.append(data[i + n_steps, 0])  # Predicting the 'Open' price
    return np.array(X), np.array(y)

# Set number of time steps for GRU
n_steps = 10
X, y = create_sequences(scaled_data, n_steps)

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build GRU model
model = Sequential([
    GRU(50, input_shape=(X_train.shape[1], X_train.shape[2])),
    Dense(1)
])
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.1, verbose=1)

# Make predictions on test data
y_pred = model.predict(X_test)

# Inverse transform predictions and actual values to original scale
y_pred_inv = scaler.inverse_transform(np.hstack((y_pred, np.zeros((y_pred.shape[0], 4)))))[:, 0]
y_test_inv = scaler.inverse_transform(np.hstack((y_test.reshape(-1, 1), np.zeros((y_test.shape[0], 4)))))[:, 0]

# Get the test dates corresponding to the predicted values
test_dates = df['Date'].values[-len(y_test):]

# Reverse the order of test dates, predictions, and actual values
test_dates = test_dates[::-1]
y_pred_inv = y_pred_inv[::-1]
y_test_inv = y_test_inv[::-1]

# Plot actual vs. predicted values with corresponding dates on the x-axis
plt.figure(figsize=(12, 6))
plt.plot(y_test_inv, label='Actual Open Prices', color='blue')
plt.plot(y_pred_inv, label='Predicted Open Prices (GRU)', color='red')
plt.title('Stock Price Prediction using GRU')
plt.xlabel('Date')
plt.ylabel('Stock Price')

# Format x-axis labels to show only a subset of dates, I chose 10 for this
num_dates = len(test_dates)
subset_indices = np.linspace(0, num_dates - 1, num=10, dtype=int)  # Select 10 evenly spaced indices
date_labels_subset = np.datetime_as_string(test_dates[subset_indices], unit='D')  # Convert subset of dates to string in YYYY-MM-DD format
plt.xticks(ticks=subset_indices, labels=date_labels_subset, rotation=45)  # Display subset of date labels

plt.legend()
plt.show()

# Evaluate the model
mae = np.mean(np.abs(y_test_inv - y_pred_inv))
mse = np.mean((y_test_inv - y_pred_inv)**2)
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
